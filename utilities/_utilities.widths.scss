/* ==========================================================================

   @WIDTH UTILITIES

   ========================================================================== */

/**
 * Here we generate a series of utility classes that give a fluid width to
 * whichever element theyâ€™re applied, e.g.:
 *
 *   <img src="" alt="" class="u-1/2" />
 *
 * These classes are most commonly used in conjunction with our layout system,
 * e.g.:
 *
 *   <div class="o-layout__item  u-1/2">
 *
 * By default, we will also generate responsive variants of each of these
 * classes, e.g.:
 *
 *   <div class="o-layout__item  u-1/1  u-1/2@tablet  u-1/3@desktop">
 *
 * Optionally, we can generate offset classes which can push and pull
 * elements left and right by a specified amount, e.g.:
 *
 *   <div class="o-layout__item  u-2/3  u-pull-1/3">
 *
 * This is useful for making very granular changes to the rendered order of
 * items in a layout.
 *
 */





// Which fractions would you like in your grid system(s)? By default, you are
// provided with fractions of one whole, halves, thirds, quarters and fifths,
// e.g.:
//
//   .u-1/2
//   .u-2/5
//   .u-3/4
//   .u-2/3

$widths-fractions: 1 2 3 4 5 !default;






// Generate responsive variants for each of the width classes? E.g.:
//
//   .u-1/2@mobile
//   .u-2/5@tablet
//   .u-3/4@desktop

$responsive-widths: true !default;






// Generate classes to offset items by a certain width? E.g.:
//
//   .u-push-1/3
//   .u-pull-2/4
//   .u-pull-1/5
//   .u-push-2/3

$widths-offsets: false !default;







// By default, we use fractions-like classes like `<div class="u-1/4">`.
// You can change the `/` to whatever you fancy with this variable.
$widths-delimiter: \/ !default;







// Private mixin to spit out our width classes. Pass in the columns we want the 
// widths to have, and an optional suffix for responsive widths. E.g. to create 
// thirds and quarters for a small breakpoint:
//
// @include widths(3 4, -sm);

@mixin widths($columns, $breakpoint: null) {

  // Loop through the number of columns for each denominator of our fractions.
  @each $denominator in $columns {

    // Begin creating a numerator for our fraction up until we hit the
    // denominator.
    @for $numerator from 1 through $denominator {

      // Build a class in the format `.u-3/4[@<breakpoint>]`.
      .u-#{$numerator}#{$widths-delimiter}#{$denominator}#{$breakpoint} {
        width: ($numerator / $denominator) * 100% !important;
      }

      @if ($widths-offsets == true) {

        /**
        * 1. Reset any leftover or conflicting `left`/`right` values.
        */

        // Build a class in the format `.u-push-1/2[@<breakpoint>]`.
        .u-push-#{$numerator}#{$widths-delimiter}#{$denominator}#{$breakpoint} {
          position: relative !important;
          right: auto !important; /* [1] */
          left: ($numerator / $denominator) * 100% !important;
        }

        // Build a class in the format `.u-pull-5/6[@<breakpoint>]`.
        .u-pull-#{$numerator}#{$widths-delimiter}#{$denominator}#{$breakpoint} {
          position: relative !important;
          right: ($numerator / $denominator) * 100% !important;
          left: auto !important; /* [1] */
        }

      }

    }

  }

}




// The following will generate a series of width helper classes based on the 
// fractions defined in the `$fractions` list. Use these classes to size things
// like grid systems. Classes take a fraction-like format (e.g. `.u-2/3`):
// 
// <div class="u-7/12">
 
@include widths($widths-fractions);








// Responsive widths
// ============================================================================

// Sass map of breakpoints used to generate responsive classes.
$widths-breakpoints: $breakpoints !default;

// Separator for the breakpoints suffix in the class name, e.g.:
// <div class="u-3/12@mobile">
$widths-breakpoint-separator: $breakpoint-separator !default;

// The below loop will generate grid system(s) for each of our breakpoints 
// defined in the $widths-breakpoints list, e.g.:
//
// <div class="u-3/12@mobile">
// <div class="u-3/12@tablet">
// <div class="u-3/12@desktop">

@if ($responsive-widths == true) {

  @each $bp-name, $bp-value in $widths-breakpoints {

    @include mq($from: $bp-name) {
      @include widths($widths-fractions, #{$widths-breakpoint-separator}#{$bp-name});
    }

  }

}
